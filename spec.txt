swarm: A federated bug tracker
------------------------------

Why?
====

In short, while there are a large number of bug trackers available, they all
have severe disadvantages that make them unusable. The bug tracker that I like
best so far is Launchpad, but it is (1) 

Terminology
===========

* Bug report
* Series

Requirements
============

 * federated
 * have an API (rest?)
 * web frontend
 * command-line UI
 * easily readable
 * restrict access to a single bug without making the rest inaccessible
 * granular access control; anonymous user may be able to create new bugs but not edit existing
 * ability to deal with bug 'graffiti' - spam or nuisance changes by users
 * users/developers can subscribe to bugs without needing a local swarm
 * able to close bugs from bug reports / NEWS files
 * slim
 * ability to do partial clones/imports

Each bug can have a list of versions that it is present in and versions that it is fixed in.

WONTFIX is a property that is per series.

Possible future enhancements:

What it is not:
 * A version control system
 * A release management system
  - It may be useful to get information about the revision/release graph somewhere, but not stored

Per-bug metadata
~~~~~~~~~~~~~~~~

 * Reporter identity
 * Bug title
 * Bug priority per stakeholder
 * Report date (inferred from history?)
 * List of "versions" that it affects
 * List of tags

Storage
=======

Persistent
~~~~~~~~~~

Bugs are identified by a unique SHA; perhaps the SHA1 for the contents of the original manifest?

Each bug is a separate ref in a git repository. Comments are stored in commit messages.
The commit has a tree object that contains a MANIFEST. Any additional files but
the bug MANIFEST that is added is considered an attachment.

Lookaside
~~~~~~~~~

There is an independent index kept along each swarm that is generated from the
persistent data. In some cases it may be possible to copy this index when cloning/fetching
from another swarm.

The index is used for searching, deduping and showing "Blocking" list of bugs
that are blocked by this bug.

MANIFEST Format
~~~~~~~~~~~~~~~
RFC822 headers:
* Reporter (same format as git committer/author)
* Title
* Subscribers: List of mailto:user@example.com (or other URLs in the future)
* Versions: List of freeform text versions; e.g. git commit SHA, release version, full URL.
* Tags: List of tags
* Depends: List of bug ids
* Status

For per-branch bug reports or status, it's always possible to bring up a separate swarm or just mark other versions as affected.

Contents are the bug description

X- headers?

Using something like markdown or restructedText in the description might be useful; optional.

Refs, revision graph
~~~~~~~~~~~~~~~~~~~~

There will be one ref per bug, e.g. .git/refs/bugs/aefs423.

A dupe merges the contents for the two bugs.  Once a dupe is marked, its ref
will point at the merged tree.

When pulling in a bug from a remote swarm into a local one, there are a couple
of options:

By default, all bugs which are not locally available are pulled in from a
remote. If there is divergence, nothing happens.  In some cases it might make
sense to merge the two branches. In other cases, just keep them separate and
let the user deal with it. Setting the ref to the zero sha can be used to block
further importing of the bug.  Behaviour could differ depending on what tags
are set; e.g. if 'upstream' is set on a debian branch, then that might be
reason to pull in a bug.

Open Questions
==============

* A user report is not the same thing as a bug report. Okay if they just file
  bug reports that later get merged? What about PII in user reports?
  - Having a separate object kind for user reports just adds more noise, so let's just use generic bug reports for these
  - Perhaps have a way of creating bug reports that are referenced when
    deduping but not a part of the DAG, so they can be obliterated without
    breaking the DAG.
